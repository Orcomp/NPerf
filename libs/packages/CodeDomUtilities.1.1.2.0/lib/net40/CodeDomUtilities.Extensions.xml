<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeDomUtilities.Extensions</name>
    </assembly>
    <members>
        <member name="T:CodeDomUtilities.CodeDomBlocks">
            <summary>
            Methods for producing CodeDom artifacts.
            </summary>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.If(System.CodeDom.CodeExpression)">
            <summary>
            Defines an If statement.
            </summary>
            <param name="condition">The condition of the if statement.</param>
            <returns>An If statement with the condition supplied.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.While(System.CodeDom.CodeExpression)">
            <summary>
            Defines an iteration statement with a condition that is evaluated at the begening of the loop (While).
            </summary>
            <param name="condition">The condition that is evaluated to decide if the loop body is executed.</param>
            <returns>The iteration statement with the condition supplied.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Namespace(System.String)">
            <summary>
            Defines a Namespace.
            </summary>
            <param name="name">The name of the namespace.</param>
            <returns>The Namespace with the supplied name.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.CompileUnit">
            <summary>
            Defines a compile unit.
            </summary>
            <returns>The compile unit.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Attribute(System.CodeDom.CodeTypeReference)">
            <summary>
            Defines an attribute from a type reference.
            </summary>
            <param name="attributeType">The type of the atttribute.</param>
            <returns>An attribute of the supplied type.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Attribute(System.String)">
            <summary>
            Defines an attribute from a string type reference.
            </summary>
            <param name="attributeType">The type of the atttribute.</param>
            <returns>An attribute of the supplied type.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Attribute(System.Type)">
            <summary>
            Defines an attribute from a System.Type object.
            </summary>
            <param name="attributeType">The type of the atttribute.</param>
            <returns>An attribute of the supplied type.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Event(System.CodeDom.MemberAttributes,System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Defines an event.
            </summary>
            <param name="attributes">The member attributes of the event.</param>
            <param name="name">The name of the event.</param>
            <param name="type">The type of the event.</param>
            <returns>An event.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Field(System.CodeDom.MemberAttributes,System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Defines a field.
            </summary>
            <param name="attributes">The member attributes of the field.</param>
            <param name="type">The type of the field.</param>
            <param name="name">The name of the field.</param>
            <returns>A field.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Method(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines a method.
            </summary>
            <param name="attributes">The member attributes of the method.</param>
            <param name="name">The name of the method.</param>
            <returns>A method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Method(System.CodeDom.MemberAttributes,System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Defines a method.
            </summary>
            <param name="attributes">The member attributes of the method.</param>
            <param name="name">The name of the method.</param>
            <param name="returnType">The return type of the method.</param>
            <returns>A method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Constructor(System.CodeDom.MemberAttributes)">
            <summary>
            Defines a constructor.
            </summary>
            <param name="attributes">The member attributes of the constructor.</param>
            <returns>A constructor.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.TypeConstructor">
            <summary>
            Defines an static constructor.
            </summary>
            <returns>An static constructor.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Property(System.CodeDom.MemberAttributes,System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Defines a property.
            </summary>
            <param name="attributes">The member attributes of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the property.</param>
            <returns>A property.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Delegate(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines a delegate type.
            </summary>
            <param name="attributes">The member attributes of the delegate.</param>
            <param name="name">The name of the delegate.</param>
            <returns>A delegate type.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Class(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines a class.
            </summary>
            <param name="attributes">The member attributes of the class.</param>
            <param name="name">The name of the class.</param>
            <returns>A class.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.PartialClass(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines a partial class.
            </summary>
            <param name="attributes">The member attributes of the partial class.</param>
            <param name="name">The name of the partial class.</param>
            <returns>A partial class.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Interface(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines an interface.
            </summary>
            <param name="attributes">The member attributes of the interface.</param>
            <param name="name">The name of the interface.</param>
            <returns>An inteface.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Struct(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines an structure.
            </summary>
            <param name="attributes">The member attributes of the structure.</param>
            <param name="name">The name of the structure.</param>
            <returns>An structure.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Enum(System.CodeDom.MemberAttributes,System.String)">
            <summary>
            Defines an enumeration.
            </summary>
            <param name="attributes">The member attributes of the enumeration.</param>
            <param name="name">The name of the enumeration.</param>
            <returns>An enumeration.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Return">
            <summary>
            Defines an empty return statement.
            </summary>
            <returns>An empty return statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Return(System.CodeDom.CodeExpression)">
            <summary>
            Defines a return statement that returns an expression.
            </summary>
            <param name="expression">The expression to return.</param>
            <returns>The return expression with the supplied expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomBlocks.Throw">
            <summary>
            Defines a throw exception statement.
            </summary>
            <returns>An statement that rethrows an exception.</returns>
        </member>
        <member name="T:CodeDomUtilities.CodeDomGenerator">
            <summary>
            Extension methods for generating text from CodeDom objects.
            </summary>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.CreateDefaultCSharpCodeGeneratorOptions">
            <summary>
            Creates common generator options for CSharp.
            </summary>
            <returns>A CodeGeneratorOptions object with the default options for CSharp.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.CreateDefaultVBGeneratorOptions">
            <summary>
            Creates common generator options for VB.
            </summary>
            <returns>A CodeGeneratorOptions object with the default options for VB.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates CSharp text from a compile unit and writes it to a text writer with the given options.
            </summary>
            <param name="compileUnit">The compile unit to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates CSharp text from a expression and writes it to a text writer with the given options.
            </summary>
            <param name="expression">The expressoin to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates CSharp text from a type member and writes it to a text writer with the given options.
            </summary>
            <param name="typeMember">The expression to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates CSharp text from a namespace and writes it to a text writer with the given options.
            </summary>
            <param name="namespace">The namespace to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates CSharp text from a statement and writes it to a text writer with the given options.
            </summary>
            <param name="statement">The statement to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates CSharp text from a type declaration and writes it to a text writer with the given options.
            </summary>
            <param name="typeDeclaration">The type declaration to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeCompileUnit,System.IO.TextWriter)">
            <summary>
            Generates CSharp text from a compile unit and writes it to a text writer with the default options.
            </summary>
            <param name="compileUnit">The compile unit to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeExpression,System.IO.TextWriter)">
            <summary>
            Generates CSharp text from a expression and writes it to a text writer with the default options.
            </summary>
            <param name="expression">The expression to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeTypeMember,System.IO.TextWriter)">
            <summary>
            Generates CSharp text from a type member and writes it to a text writer with the default options.
            </summary>
            <param name="typeMember">The type member to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeNamespace,System.IO.TextWriter)">
            <summary>
            Generates CSharp text from a namespace and writes it to a text writer with the default options.
            </summary>
            <param name="namespace">The namespace to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeStatement,System.IO.TextWriter)">
            <summary>
            Generates CSharp text from a statement and writes it to a text writer with the default options.
            </summary>
            <param name="statement">The statement to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateCSharpTo(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter)">
            <summary>
            Generates CSharp text from a type declaration and writes it to a text writer with the default options.
            </summary>
            <param name="typeDeclaration">The type declaration to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCSharp(System.CodeDom.CodeCompileUnit)">
            <summary>
            Gets CSharp text from a compile unit.
            </summary>
            <param name="compileUnit">The compile unit to get text from.</param>
            <returns>The text generated from the compile unit.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCSharp(System.CodeDom.CodeExpression)">
            <summary>
            Gets CSharp text from an expression.
            </summary>
            <param name="expression">The compile unit to get text from.</param>
            <returns>The text generated from the expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCSharp(System.CodeDom.CodeTypeMember)">
            <summary>
            Gets CSharp text from a type member.
            </summary>
            <param name="typeMember">The type member to get text from.</param>
            <returns>The text generated from the type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCSharp(System.CodeDom.CodeNamespace)">
            <summary>
            Gets CSharp text from a namespace.
            </summary>
            <param name="namespace">The namespace to get text from.</param>
            <returns>The text generated from the namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCSharp(System.CodeDom.CodeStatement)">
            <summary>
            Gets CSharp text from a statement.
            </summary>
            <param name="statement">The statement to get text from.</param>
            <returns>The text generated from the statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCSharp(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Gets CSharp text from a type declaration.
            </summary>
            <param name="typeDeclaration">The type declaration to get text from.</param>
            <returns>The text generated from the type declaration.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCSharpToFile(System.CodeDom.CodeCompileUnit,System.String)">
            <summary>
            Generates CSharp text from a compile unit and writes it to a file.
            </summary>
            <param name="compileUnit">The compile unit from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCSharpToFile(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Generates CSharp text from a expression and writes it to a file.
            </summary>
            <param name="expression">The expression from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCSharpToFile(System.CodeDom.CodeTypeMember,System.String)">
            <summary>
            Generates CSharp text from a type member and writes it to a file.
            </summary>
            <param name="typeMember">The type member from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCSharpToFile(System.CodeDom.CodeNamespace,System.String)">
            <summary>
            Generates CSharp text from a namespace and writes it to a file.
            </summary>
            <param name="namespace">The namespace from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCSharpToFile(System.CodeDom.CodeStatement,System.String)">
            <summary>
            Generates CSharp text from a statement and writes it to a file.
            </summary>
            <param name="statement">The statement from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCSharpToFile(System.CodeDom.CodeTypeDeclaration,System.String)">
            <summary>
            Generates CSharp text from a type declaration and writes it to a file.
            </summary>
            <param name="typeDeclaration">The type declaration from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates VB text from a compile unit and writes it to a text writer with the given options.
            </summary>
            <param name="compileUnit">The compile unit to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates VB text from an expression and writes it to a text writer with the given options.
            </summary>
            <param name="expression">The expression to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates VB text from a type member and writes it to a text writer with the given options.
            </summary>
            <param name="typeMember">The type member to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates VB text from a namespace and writes it to a text writer with the given options.
            </summary>
            <param name="namespace">The namespace to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates VB text from a statement and writes it to a text writer with the given options.
            </summary>
            <param name="statement">The statement to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
            <summary>
            Generates VB text from a type declaration and writes it to a text writer with the given options.
            </summary>
            <param name="typeDeclaration">The type declaration to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
            <param name="options">The generation options.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeCompileUnit,System.IO.TextWriter)">
            <summary>
            Generates VB text from a compile unit and writes it to a text writer with the default options.
            </summary>
            <param name="compileUnit">The compile unit to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeExpression,System.IO.TextWriter)">
            <summary>
            Generates VB text from a expression and writes it to a text writer with the default options.
            </summary>
            <param name="expression">The expression to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeTypeMember,System.IO.TextWriter)">
            <summary>
            Generates VB text from a type member and writes it to a text writer with the default options.
            </summary>
            <param name="typeMember">The type member to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeNamespace,System.IO.TextWriter)">
            <summary>
            Generates VB text from a namespace and writes it to a text writer with the default options.
            </summary>
            <param name="namespace">The namespace to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeStatement,System.IO.TextWriter)">
            <summary>
            Generates VB text from a statement and writes it to a text writer with the default options.
            </summary>
            <param name="statement">The statement to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GenerateVBTo(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter)">
            <summary>
            Generates VB text from a type declaration and writes it to a text writer with the default options.
            </summary>
            <param name="typeDeclaration">The type declaration to generate text from.</param>
            <param name="writer">The text writer to write to.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetVB(System.CodeDom.CodeCompileUnit)">
            <summary>
            Gets VB text from a compile unit.
            </summary>
            <param name="compileUnit">The compile unit to get text from.</param>
            <returns>The text generated from the compile unit.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetVB(System.CodeDom.CodeExpression)">
            <summary>
            Gets VB text from an expression.
            </summary>
            <param name="expression">The expression to get text from.</param>
            <returns>The text generated from the expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetVB(System.CodeDom.CodeTypeMember)">
            <summary>
            Gets VB text from a type member.
            </summary>
            <param name="typeMember">The type member to get text from.</param>
            <returns>The text generated from the type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetVB(System.CodeDom.CodeNamespace)">
            <summary>
            Gets VB text from a namespace.
            </summary>
            <param name="namespace">The namespace to get text from.</param>
            <returns>The text generated from the namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetVB(System.CodeDom.CodeStatement)">
            <summary>
            Gets VB text from a statement.
            </summary>
            <param name="statement">The statement to get text from.</param>
            <returns>The text generated from the statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetVB(System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Gets VB text from a type declaration.
            </summary>
            <param name="typeDeclaration">The type declaration to get text from.</param>
            <returns>The text generated from the type declaration.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveVBToFile(System.CodeDom.CodeCompileUnit,System.String)">
            <summary>
            Generates VB text from a compile unit and writes it to a file.
            </summary>
            <param name="compileUnit">The compile unit from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveVBToFile(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Generates VB text from an expression and writes it to a file.
            </summary>
            <param name="expression">The expression from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveVBToFile(System.CodeDom.CodeTypeMember,System.String)">
            <summary>
            Generates VB text from a type member and writes it to a file.
            </summary>
            <param name="typeMember">The type member from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveVBToFile(System.CodeDom.CodeNamespace,System.String)">
            <summary>
            Generates VB text from a namespace and writes it to a file.
            </summary>
            <param name="namespace">The namespace from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveVBToFile(System.CodeDom.CodeStatement,System.String)">
            <summary>
            Generates VB text from a statement and writes it to a file.
            </summary>
            <param name="statement">The statement from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveVBToFile(System.CodeDom.CodeTypeDeclaration,System.String)">
            <summary>
            Generates VB text from a type declaration and writes it to a file.
            </summary>
            <param name="typeDeclaration">The type declaration from which text is generated.</param>
            <param name="filePath">The path to output file.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.GetCode(System.Action{System.IO.TextWriter})">
            <summary>
            Generates code with an indented text writer.
            </summary>
            <param name="codeGenerationFunction">The function used to generate the code.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomGenerator.SaveCodeToFile(System.Action{System.IO.TextWriter},System.String)">
            <summary>
            Generates code and writes it to a file.
            </summary>
            <param name="codeGenerationFunction">The function used to generate the code.</param>
            <param name="filePath">The path of the output file.</param>
        </member>
        <member name="T:CodeDomUtilities.CodeDomExpressions">
            <summary>
            Common expressions.
            </summary>
        </member>
        <member name="P:CodeDomUtilities.CodeDomExpressions.This">
            <summary>
            Gets an expression to the this object.
            </summary>
            <value>An expression to the this object.</value>
        </member>
        <member name="P:CodeDomUtilities.CodeDomExpressions.Value">
            <summary>
            Gets an expression for the value contextual keyword for a property.
            </summary>
            <value>An expression for the value contextual keyword for a property.</value>
        </member>
        <member name="P:CodeDomUtilities.CodeDomExpressions.Null">
            <summary>
            Gets an expression for the null literal.
            </summary>
            <value>An expression for the null literal.</value>
        </member>
        <member name="P:CodeDomUtilities.CodeDomExpressions.StringEmpty">
            <summary>
            Gets an expression for the System.String.Empty field.
            </summary>
            <value>An expression for the System.String.Empty field.</value>
        </member>
        <member name="P:CodeDomUtilities.CodeDomExpressions.EmptyEventArgs">
            <summary>
            Gets an expression for the System.EventArgs.Empty field.
            </summary>
            <value>An expression for the System.EventArgs.Empty field.</value>
        </member>
        <member name="P:CodeDomUtilities.CodeDomExpressions.DBNull">
            <summary>
            Gets an expression for the System.DBNull.Value field.
            </summary>
            <value>An expression for the System.DBNull.Value field.</value>
        </member>
        <member name="T:CodeDomUtilities.CodeDomExtensions">
            <summary>
            Extension methods for composing CodeDom graphs.
            </summary>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddRange(System.CodeDom.CodeAttributeDeclarationCollection,System.Collections.Generic.IEnumerable{System.CodeDom.CodeAttributeDeclaration})">
            <summary>
            Adds all the attribute declarations at the end of the attribure declaration collection.
            </summary>
            <param name="attributeDeclarationCollection">The attribute declaration collection.</param>
            <param name="attributeDeclarations">The attribute declarations to be added.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddRange(System.CodeDom.CodeCommentStatementCollection,System.Collections.Generic.IEnumerable{System.CodeDom.CodeCommentStatement})">
            <summary>
            Adds all the comment statements at the end of the comment statements collection.
            </summary>
            <param name="commentStatementCollection">The comment statement collection.</param>
            <param name="commentStatements">The commnent statements to be added.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddRange(System.CodeDom.CodeStatementCollection,System.Collections.Generic.IEnumerable{System.CodeDom.CodeStatement})">
            <summary>
            Adds all the statements at the end of the statements collection.
            </summary>
            <param name="statementCollection">The statements collection.</param>
            <param name="statements">The statements to be added.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddRange(System.CodeDom.CodeStatementCollection,System.Collections.Generic.IEnumerable{System.CodeDom.CodeExpression})">
            <summary>
            Adds all the expression at the ennd of the statements collection.
            </summary>
            <param name="statementCollection">The statements collection.</param>
            <param name="expressions">The expressions to be added.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddRange(System.CodeDom.CodeCatchClauseCollection,System.Collections.Generic.IEnumerable{System.CodeDom.CodeCatchClause})">
            <summary>
            Adds all the catch clauses at the end of the catch clauses collection.
            </summary>
            <param name="catchClauseCollection">The catch clauses collection.</param>
            <param name="catchClauses">The catch clauses to be added.</param>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddAttribute``1(``0,System.CodeDom.CodeAttributeDeclaration)">
            <summary>
            Adds an attribute declaration to a type member.
            </summary>
            <param name="typeMember">The type member.</param>
            <param name="attribute">The attribute to be added.</param>
            <typeparam name="T">The CodeMemberType argument.</typeparam>
            <returns>The same type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddAttribute(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeAttributeDeclaration)">
            <summary>
            Adds an attribute declaration to a compile unit.
            </summary>
            <param name="compileUnit">The compile unit.</param>
            <param name="attribute">The attribute to be added.</param>
            <returns>The same compile unit.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddAttributeOnReturnType``1(``0,System.CodeDom.CodeAttributeDeclaration)">
            <summary>
            Adds an attribute declatation to the return type of a method.
            </summary>
            <param name="method">The method.</param>
            <param name="attribute">The attribute to be added.</param>
            <typeparam name="T">The CodeMemberMethod argument.</typeparam>
            <returns>The same method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddComment``1(``0,System.CodeDom.CodeCommentStatement)">
            <summary>
            Adds a comment to a type member.
            </summary>
            <param name="typeMember">The type member.</param>
            <param name="comment">The comment to be added.</param>
            <typeparam name="T">The CodeType.</typeparam>
            <returns>The same type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddComment(System.CodeDom.CodeNamespace,System.CodeDom.CodeCommentStatement)">
            <summary>
            Adds a comment to a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="comment">The comment to be added.</param>
            <returns>The same namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddComment``1(``0,System.String)">
            <summary>
            Adds text as doc comment to a type member.
            </summary>
            <param name="typeMember">The type member.</param>
            <param name="commentText">The text to be added as doc comment.</param>
            <typeparam name="T">The of the Code type member.</typeparam>
            <returns>The same type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddComment(System.CodeDom.CodeNamespace,System.String)">
            <summary>
            Adds text as doc comment to a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="commentText">The text to be added as doc comment.</param>
            <returns>The same namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddCommentLines``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the lines as doc comment to a type member.
            </summary>
            <param name="typeMember">The type member.</param>
            <param name="lines">The lines to be added as doc comment.</param>
            <typeparam name="T">The of the Code type member.</typeparam>
            <returns>The same type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddCommentLines(System.CodeDom.CodeNamespace,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the lines as doc comment to a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="lines">The lines to be added as doc comment.</param>
            <returns>The same namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddSummaryComment``1(``0,System.String)">
            <summary>
            Adds text as summary comment to a type member.
            </summary>
            <param name="constructor">The type member.</param>
            <param name="commentText">The text to be added as summary.</param>
            <typeparam name="T">The of the Code type member.</typeparam>
            <returns>The same type member.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddSummaryComment(System.CodeDom.CodeNamespace,System.String)">
            <summary>
            Adds text as summary comment to a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="commentText">The text to be added as summary.</param>
            <returns>The same namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement``1(``0,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to a method.
            </summary>
            <param name="method">The method.</param>
            <param name="statement">The statement to be added.</param>
            <typeparam name="T">The of the Code member method.</typeparam>
            <returns>The same method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement``1(``0,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to a method.
            </summary>
            <param name="method">The method.</param>
            <param name="expression">The expression to be added.</param>
            <typeparam name="T">The of the Code member method.</typeparam>
            <returns>The same method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement(System.CodeDom.CodeTypeConstructor,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to type constructor.
            </summary>
            <param name="typeConstructor">The type constructor.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same type constructor.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to a method.
            </summary>
            <param name="method">The method.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement(System.CodeDom.CodeIterationStatement,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to an iteration statement.
            </summary>
            <param name="iterationStatement">The iteration statement.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same iteration statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement(System.CodeDom.CodeIterationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Adds an statement to an iteration statement.
            </summary>
            <param name="iterationStatement">The iteration statement.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same iteration statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement(System.CodeDom.CodeCatchClause,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to a catch clause.
            </summary>
            <param name="catchClause">The catch clause.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same catch clause.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddStatement(System.CodeDom.CodeCatchClause,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to a catch clause.
            </summary>
            <param name="catchClause">The catch clause.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same catch clause.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddGetStatement(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to the getter of a property.
            </summary>
            <param name="property">The property.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same property.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddGetStatement(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the getter of a property.
            </summary>
            <param name="property">The property.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same property.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddSetStatement(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to the setter of a property.
            </summary>
            <param name="property">The property.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same property.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddSetStatement(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the setter of property.
            </summary>
            <param name="property">The property.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same property.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddTrueStatement(System.CodeDom.CodeConditionStatement,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to the true portion of a condition statement.
            </summary>
            <param name="conditionStatement">The condition statement.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same condition statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddTrueStatement(System.CodeDom.CodeConditionStatement,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the true portion of a condition statement.
            </summary>
            <param name="conditionStatement">The condition statement.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same condition statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddFalseStatement(System.CodeDom.CodeConditionStatement,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to the false portion of a condition statement.
            </summary>
            <param name="conditionStatement">The condition statement.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same condition statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddFalseStatement(System.CodeDom.CodeConditionStatement,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to the false portion of a condition statement.
            </summary>
            <param name="conditionStatement">The condition statement.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same condition statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddTryStatement(System.CodeDom.CodeTryCatchFinallyStatement,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to a try block.
            </summary>
            <param name="tryCatchFinally">The try-catch-finally statement.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same try-catch-finally statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddTryStatement(System.CodeDom.CodeTryCatchFinallyStatement,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to a try block.
            </summary>
            <param name="tryCatchFinally">The try-catch-finally statement.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same try-catch-finally statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement,System.CodeDom.CodeStatement)">
            <summary>
            Adds an statement to a finally block.
            </summary>
            <param name="tryCatchFinally">The try-catch-finally statement.</param>
            <param name="statement">The statement to be added.</param>
            <returns>The same try-catch-finally statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement,System.CodeDom.CodeExpression)">
            <summary>
            Adds an expression to a finally block.
            </summary>
            <param name="tryCatchFinally">The try-catch-finally statement.</param>
            <param name="expression">The expression to be added.</param>
            <returns>The same try-catch-finally statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddCatchClause(System.CodeDom.CodeTryCatchFinallyStatement,System.CodeDom.CodeCatchClause)">
            <summary>
            Adds a catch clause to a try-catch-finally statement.
            </summary>
            <param name="tryCatchFinally">The try-catch-finally statement.</param>
            <param name="catchClause">The catch clause to be added.</param>
            <returns>The same try-catch-finally statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddParameter(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Adds a parameter to a method.
            </summary>
            <param name="method">The method.</param>
            <param name="parameter">The parameter to be added.</param>
            <returns>The same method.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddParameter(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Adds a parameter to a property.
            </summary>
            <param name="property">The property.</param>
            <param name="parameter">The parameter to be added.</param>
            <returns>The same property.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddParameter(System.CodeDom.CodeConstructor,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Adds a parameter to a constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <param name="parameter">The parameter to be added.</param>
            <returns>The same constructor.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddParameter(System.CodeDom.CodeTypeDelegate,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Adds a paramter to a delegate type.
            </summary>
            <param name="delegate">The delegate type.</param>
            <param name="parameter">The parameter to be added.</param>
            <returns>The same delegate type.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddMember(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeMember)">
            <summary>
            Adds a member to a type declaration.
            </summary>
            <param name="typeDeclaration">The type declaration.</param>
            <param name="typeMember">The type member to be added.</param>
            <returns>The same type declaration.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddImport(System.CodeDom.CodeNamespace,System.String)">
            <summary>
            Adds a namespace import to a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="namespaceToImport">The namespace to import.</param>
            <returns>The same namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddType(System.CodeDom.CodeNamespace,System.CodeDom.CodeTypeDeclaration)">
            <summary>
            Adds a type to a namespace.
            </summary>
            <param name="namespace">The namespace.</param>
            <param name="typeDeclaration">The type declaration to be added.</param>
            <returns>The same namespace.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AddNamespace(System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace)">
            <summary>
            Adds a namespace to a compile unit.
            </summary>
            <param name="compileUnit">The compile unit.</param>
            <param name="namespace">The namespace to be added.</param>
            <returns>The same compile unit.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Negation(System.CodeDom.CodeExpression)">
            <summary>
            Creates a simulated boolean negation of the given condition.
            </summary>
            <param name="condition">The condition to negate.</param>
            <returns>The negation of the condition.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Negation(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a simulated boolean negation of the given variable.
            </summary>
            <param name="variable">The variable to negate.</param>
            <returns>The negation of the variable.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Negation(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a simulated boolean negation of the given parameter.
            </summary>
            <param name="parameter">The parameter to negate.</param>
            <returns>The negation of the parameter.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.UnaryMinus(System.CodeDom.CodeExpression)">
            <summary>
            Creates a emulated unary minus expression.
            </summary>
            <param name="expression">The expression to have subtracted.</param>
            <returns>The negated expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.UnaryMinus(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a emulated unary minus expression.
            </summary>
            <param name="parameter">The expression to have subtracted.</param>
            <returns>The negated expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.UnaryMinus(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a emulated unary minus expression.
            </summary>
            <param name="variable">The expression to have subtracted.</param>
            <returns>The negated expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Return(System.CodeDom.CodeExpression)">
            <summary>
            Creates a return statement.
            </summary>
            <param name="expression">The expression to return.</param>
            <returns>A return statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Return(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a return statement.
            </summary>
            <param name="parameter">The paramter to return.</param>
            <returns>A return statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Return(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a return statement.
            </summary>
            <param name="variable">The variable to return.</param>
            <returns>A return statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Throw(System.CodeDom.CodeExpression)">
            <summary>
            Creates a throw statement.
            </summary>
            <param name="expression">The expression to throw.</param>
            <returns>A throw statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Throw(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a throw statement.
            </summary>
            <param name="parameter">The parameter to throw.</param>
            <returns>A throw statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Throw(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a throw statement.
            </summary>
            <param name="variable">The variable to throw.</param>
            <returns>A throw statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AsExpression(System.CodeDom.CodeTypeReference)">
            <summary>
            Interprets a type reference as an expression.
            </summary>
            <param name="type">The type reference.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AsExpression(System.Type)">
            <summary>
            Interprets a type as an expression.
            </summary>
            <param name="type">The type.</param>
            <returns>An expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateObject(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a object-create expression.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="parameters">The parameters to the constructor.</param>
            <returns>An object-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateObject(System.Type,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an object-create expression.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="parameters">The paramters to the constructor.</param>
            <returns>An object-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateObject(System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a object-create expression.
            </summary>
            <param name="type">The type of the object to create.</param>
            <param name="parameters">The parameters to the constructor.</param>
            <returns>An object-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetObject">The object on which the delegate is created.</param>
            <param name="methodName">The name of the method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeVariableDeclarationStatement,System.String)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="variable">The object on which the delegate is created.</param>
            <param name="methodName">The name of the method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeParameterDeclarationExpression,System.String)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="parameter">The object on which the delegate is created.</param>
            <param name="methodName">The name of the method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetType">The type on which the delegate is created.</param>
            <param name="methodName">The name of the method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.Type,System.String)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetType">The type on which the delegate is created.</param>
            <param name="methodName">The name of the method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.String,System.String)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetType">The type on which the delegate is created.</param>
            <param name="methodName">The name of the method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetObject">The object on which the delegate is created.</param>
            <param name="method">The method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="variable">The object on which the delegate is created.</param>
            <param name="method">The method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="parameter">The object on which the delegate is created.</param>
            <param name="method">The method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetType">The type on which the delegate is created.</param>
            <param name="method">The method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.Type,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetType">The type on which the delegate is created.</param>
            <param name="method">The method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateDelegate(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a delegate-create expression.
            </summary>
            <param name="type">The type of the delegate.</param>
            <param name="targetType">The type on which the delegate is created.</param>
            <param name="method">The method that gets invoked when the delegate is invoked.</param>
            <returns>A delegate-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateArray(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
            <summary>
            Creates an array-create for a single-dimensional array expression.
            </summary>
            <param name="type">The type of the array.</param>
            <param name="size">The size of the array.</param>
            <returns>An array-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateArray(System.Type,System.CodeDom.CodeExpression)">
            <summary>
            Creates an array-create for a single-dimensional array expression.
            </summary>
            <param name="type">The type of the array.</param>
            <param name="size">The size of the array.</param>
            <returns>An array-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CreateArray(System.String,System.CodeDom.CodeExpression)">
            <summary>
            Creates an array-create for a single-dimensional array expression.
            </summary>
            <param name="type">The type of the array.</param>
            <param name="size">The size of the array.</param>
            <returns>An array-create expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForParameter(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a parameter declaration from a type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <returns>A parameter declaration expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForParameter(System.Type,System.String)">
            <summary>
            Creates a parameter declaration from a type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <returns>A parameter declaration expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForParameter(System.String,System.String)">
            <summary>
            Creates a parameter declaration from a type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <returns>A parameter declaration expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForParameter(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.FieldDirection)">
            <summary>
            Creates a parameter declaration from a type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>A parameter declaration expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForParameter(System.Type,System.String,System.CodeDom.FieldDirection)">
            <summary>
            Creates a parameter declaration from a type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>A parameter declaration expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForParameter(System.String,System.String,System.CodeDom.FieldDirection)">
            <summary>
            Creates a parameter declaration from a type.
            </summary>
            <param name="type">The type of the parameter.</param>
            <param name="name">The name of the parameter.</param>
            <param name="direction">The direction of the parameter.</param>
            <returns>A parameter declaration expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForVariable(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a variable declaration statement from a type.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <returns>A variable declaration statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForVariable(System.Type,System.String)">
            <summary>
            Creates a variable declaration statement from a type.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <returns>A variable declaration statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ForVariable(System.String,System.String)">
            <summary>
            Creates a variable declaration statement from a type.
            </summary>
            <param name="type">The type of the variable.</param>
            <param name="name">The name of the variable.</param>
            <returns>A variable declaration statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.VariableReference(System.String)">
            <summary>
            Creates a variable reference from a variable name.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <returns>A variable reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ArgumentReferenece(System.String)">
            <summary>
            Creates an argument reference from a parameter name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <returns>An argument reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.TypeReference(System.Type)">
            <summary>
            Creates a type reference from a type.
            </summary>
            <param name="type">The System.Type instance to refer to.</param>
            <returns>A type reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.TypeReference(System.String)">
            <summary>
            Creates a type reference from a type name.
            </summary>
            <param name="type">The name of the type.</param>
            <returns>A type reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Comment(System.String)">
            <summary>
            Creates a comment.
            </summary>
            <param name="comment">The text of the comment.</param>
            <returns>A comment.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CommentForDoc(System.String)">
            <summary>
            Creates a comment for documentation.
            </summary>
            <param name="comment">The text of the comment.</param>
            <returns>A comment for documentation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CommentStatement(System.String)">
            <summary>
            Creates a comment statement.
            </summary>
            <param name="comment">The text of the comment.</param>
            <returns>A comment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CommentStatementForDoc(System.String)">
            <summary>
            Creates a comment statement for documentattion.
            </summary>
            <param name="comment">The text of the comment.</param>
            <returns>A comment statement for documentation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.SetReturnType(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference)">
            <summary>
            Sets the return type of a method.
            </summary>
            <param name="method">The method.</param>
            <param name="type">The return tyoe.</param>
            <returns>The same method with its return type set.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.SetReturnType(System.CodeDom.CodeMemberMethod,System.Type)">
            <summary>
            Sets the return type of a method.
            </summary>
            <param name="method">The method.</param>
            <param name="type">The return tyoe.</param>
            <returns>The same method with its return type set.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.SetReturnType(System.CodeDom.CodeMemberMethod,System.String)">
            <summary>
            Sets the return type of a method.
            </summary>
            <param name="method">The method.</param>
            <param name="type">The return tyoe.</param>
            <returns>The same method with its return type set.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeExpression,System.CodeDom.CodeTypeReference)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeExpression,System.Type)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="expression">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeTypeReference)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="parameter">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeParameterDeclarationExpression,System.Type)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="parameter">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeParameterDeclarationExpression,System.String)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="parameter">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeTypeReference)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="variable">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeVariableDeclarationStatement,System.Type)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="variable">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.CastTo(System.CodeDom.CodeVariableDeclarationStatement,System.String)">
            <summary>
            Creates a cast expression.
            </summary>
            <param name="variable">The expression to cast.</param>
            <param name="targetType">The type to cast to.</param>
            <returns>A cast expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Literal(System.Object)">
            <summary>
            Creates a literal expression from an object.
            </summary>
            <param name="value">The value of the literal.</param>
            <returns>A literal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters for method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeVariableDeclarationStatement,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters for method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeParameterDeclarationExpression,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters for method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters for method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.Type,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters for method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.String,System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method to invoke.</param>
            <param name="parameters">The parameters for method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation based on a method reference.
            </summary>
            <param name="methodReference">The reference to the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodDeclaration">The declaration of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given object.
            </summary>
            <param name="variable">The object.</param>
            <param name="methodDeclaration">The declaration of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="methodDeclaration">The declaration of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDeclaration">The declaration of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.Type,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDeclaration">The declaration of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Invoke(System.String,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a method invocation on a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDeclaration">The declaration of the method.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A method invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.InvokeDelegate(System.CodeDom.CodeExpression)">
            <summary>
            Creates a delegate invocation.
            </summary>
            <param name="targetObject">The delegate instance to invoke.</param>
            <returns>A delegate invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.InvokeDelegate(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a delegate invocation. 
            </summary>
            <param name="variable">The delegate instance to invoke.</param>
            <returns>A delegate invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.InvokeDelegate(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a delegate invocation.
            </summary>
            <param name="parameter">The delegate instance to invoke.</param>
            <returns>A delegate invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.InvokeDelegate(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a delegate invocation.
            </summary>
            <param name="targetObject">The delegates instance to invoke.</param>
            <param name="parameters">The parameters for the delegate.</param>
            <returns>A delegate invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.InvokeDelegate(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a delegate invocation.
            </summary>
            <param name="variable">The delegates instance to invoke.</param>
            <param name="parameters">The parameters for the delegate.</param>
            <returns>A delegate invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.InvokeDelegate(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates a delegate invocation.
            </summary>
            <param name="parameter">The delegates instance to invoke.</param>
            <param name="parameters">The parameters for the delegate.</param>
            <returns>A delegate invocation.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.Type)">
            <summary>
            Creates a type reference from a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A type reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a varible reference from a variable declaration.
            </summary>
            <param name="variableDeclaration">The variable declaration.</param>
            <returns>A variable reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an argument reference from a parameter declaration.
            </summary>
            <param name="parameterDeclaration">The parameter declaration.</param>
            <returns>An argument reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.Type,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.String,System.CodeDom.CodeMemberMethod)">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDeclaration">The method declaration.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodDeclaration">A method declaration.</param>
            <param name="typeParameters">The type parameters for the method reference.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="methodDeclaration">A method declaration.</param>
            <param name="typeParameters">The type parameters for the method reference.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="methodDeclaration">A method declaration.</param>
            <param name="typeParameters">The type parameters for the method reference.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an type.
            </summary>
            <param name="type">The object.</param>
            <param name="methodDeclaration">A method declaration.</param>
            <param name="typeParameters">The type parameters for the method reference.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.Type,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an type.
            </summary>
            <param name="type">The object.</param>
            <param name="methodDeclaration">A method declaration.</param>
            <param name="typeParameters">The type parameters for the method reference.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.String,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an type.
            </summary>
            <param name="type">The object.</param>
            <param name="methodDeclaration">A method declaration.</param>
            <param name="typeParameters">The type parameters for the method reference.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberProperty)">
            <summary>
            Creates a property reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="propertyDeclaration">The property declaration.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberProperty)">
            <summary>
            Creates a property reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="propertyDeclaration">The property declaration.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberProperty)">
            <summary>
            Creates a property reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="propertyDeclaration">The property declaration.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberProperty)">
            <summary>
            Creates a property reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyDeclaration">The property declaration.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.Type,System.CodeDom.CodeMemberProperty)">
            <summary>
            Creates a property reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyDeclaration">The property declaration.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.String,System.CodeDom.CodeMemberProperty)">
            <summary>
            Creates a property reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyDeclaration">The property declaration.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberField)">
            <summary>
            Creates a field reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="fieldDeclaration">The declaration of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberField)">
            <summary>
            Creates a field reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="fieldDeclaration">The declaration of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberField)">
            <summary>
            Creates a field reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="fieldDeclaration">The declaration of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberField)">
            <summary>
            Creates a field reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldDeclaration">The declaration of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.Type,System.CodeDom.CodeMemberField)">
            <summary>
            Creates a field reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldDeclaration">The declaration of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.String,System.CodeDom.CodeMemberField)">
            <summary>
            Creates a field reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldDeclaration">The declaration of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberEvent)">
            <summary>
            Creates an event reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="eventDeclaration">The declaration of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeMemberEvent)">
            <summary>
            Creates an event reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="eventDeclaration">The declaration of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeMemberEvent)">
            <summary>
            Creates an event reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="eventDeclaration">The declaration of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberEvent)">
            <summary>
            Creates an event reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="eventDeclaration">The declaration of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.Type,System.CodeDom.CodeMemberEvent)">
            <summary>
            Creates an event reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="eventDeclaration">The declaration of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Reference(System.String,System.CodeDom.CodeMemberEvent)">
            <summary>
            Creates an event reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="eventDeclaration">The declaration of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ArrayReference(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an array reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="indexes">The indexes that reference an array element.</param>
            <returns>An array reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ArrayReference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an array reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="indexes">The indexes that reference an array element.</param>
            <returns>An array reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ArrayReference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an array reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="indexes">The indexes that reference an array element.</param>
            <returns>An array reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IndexerReference(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an indexer reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="indexes">The indexes that reference an element.</param>
            <returns>An indexer reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IndexerReference(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an indexer reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="indexes">The indexes that reference an element.</param>
            <returns>An indexer reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IndexerReference(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an indexer reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="indexes">The indexes that reference an element.</param>
            <returns>An indexer reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IndexerReference(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an indexer reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="indexes">The indexes that reference an element.</param>
            <returns>An indexer reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IndexerReference(System.Type,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an indexer reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="indexes">The indexes that reference an element.</param>
            <returns>An indexer reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IndexerReference(System.String,System.CodeDom.CodeExpression[])">
            <summary>
            Creates an indexer reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="indexes">The indexes that reference an element.</param>
            <returns>An indexer reference expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeVariableDeclarationStatement,System.String)">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeParameterDeclarationExpression,System.String)">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.Type,System.String)">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.String,System.String)">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameters">The type parameters.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeVariableDeclarationStatement,System.String,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameters">The type parameters.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeParameterDeclarationExpression,System.String,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameters">The type parameters.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameters">The type parameters.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.Type,System.String,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameters">The type parameters.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.MethodReference(System.String,System.String,System.CodeDom.CodeTypeReference[])">
            <summary>
            Creates a method reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <param name="typeParameters">The type parameters.</param>
            <returns>A method reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.PropertyReference(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Creates a property reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.PropertyReference(System.CodeDom.CodeVariableDeclarationStatement,System.String)">
            <summary>
            Creates a property reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.PropertyReference(System.CodeDom.CodeParameterDeclarationExpression,System.String)">
            <summary>
            Creates a property reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.PropertyReference(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a property reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.PropertyReference(System.Type,System.String)">
            <summary>
            Creates a property reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.PropertyReference(System.String,System.String)">
            <summary>
            Creates a property reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A property reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.FieldReference(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Creates a field reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.FieldReference(System.CodeDom.CodeVariableDeclarationStatement,System.String)">
            <summary>
            Creates a field reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.FieldReference(System.CodeDom.CodeParameterDeclarationExpression,System.String)">
            <summary>
            Creates a field reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.FieldReference(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a field reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.FieldReference(System.Type,System.String)">
            <summary>
            Creates a field reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.FieldReference(System.String,System.String)">
            <summary>
            Creates a field reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">The name of the field.</param>
            <returns>A field reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.EventReference(System.CodeDom.CodeExpression,System.String)">
            <summary>
            Creates a event reference on an object.
            </summary>
            <param name="targetObject">The object.</param>
            <param name="eventName">The name of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.EventReference(System.CodeDom.CodeVariableDeclarationStatement,System.String)">
            <summary>
            Creates a event reference on an object.
            </summary>
            <param name="variable">The object.</param>
            <param name="eventName">The name of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.EventReference(System.CodeDom.CodeParameterDeclarationExpression,System.String)">
            <summary>
            Creates a event reference on an object.
            </summary>
            <param name="parameter">The object.</param>
            <param name="eventName">The name of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.EventReference(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Creates a event reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="eventName">The name of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.EventReference(System.Type,System.String)">
            <summary>
            Creates a event reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="eventName">The name of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.EventReference(System.String,System.String)">
            <summary>
            Creates a event reference on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="eventName">The name of the event.</param>
            <returns>An event reference.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a binary addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A binary addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a binary addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A binary addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Add(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An addition expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.AssignExpression(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an assignment expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseAnd(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a bitwise-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BitwiseOr(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a bitwise-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A bitwise-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanAnd(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a boolean-and expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-and expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.BooleanOr(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a boolean-or expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A boolean-or expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Divide(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A division expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThan(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a greater-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.GreaterThanOrEqual(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a greater-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A greater-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityEquality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an identity-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.IdentityInequality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an identity-inequality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A identity-inequality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThan(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a less-than expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.LessThanOrEqual(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a less-than-or-equal expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A less-than-or-equal expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Modulus(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a modulus expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A modulus expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Multiply(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A multiplication expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Subtract(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A subtraction expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.ValueEquality(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates a value-equality expression.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A value-equality expression.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeExpression)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeVariableDeclarationStatement,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeVariableDeclarationStatement)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
        <member name="M:CodeDomUtilities.CodeDomExtensions.Assign(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Creates an assignment statement.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>An assignment statement.</returns>
        </member>
    </members>
</doc>
